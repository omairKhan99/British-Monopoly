<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monopoly - British Edition</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #cce2d4;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            min-height: 100vh;
            padding: 20px;
            margin: 0;
            overflow-x: hidden;
        }

        .game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        .board {
            display: grid;
            grid-template-columns: 100px repeat(9, 65px) 100px;
            grid-template-rows: 100px repeat(9, 65px) 100px;
            gap: 2px;
            border: 3px solid black;
            background-color: #f7f7f7;
            width: 802px;
            height: 802px;
            position: relative;
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }

        .space {
            background-color: #f7f7f7;
            border: 1px solid #333;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between;
            text-align: center;
            font-size: 9px;
            line-height: 1.2;
            position: relative;
            padding: 1px;
            box-sizing: border-box;
            overflow: hidden;
        }
        .space .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 70%;
            width: 100%;
        }
        .space .token-container {
            width: 100%;
            height: 25%;
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            justify-content: center;
            gap: 2px;
            padding: 1px;
        }
        .player-token {
            width: 22px;
            height: 22px;
            font-size: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid rgba(0,0,0,0.2);
            border-radius: 4px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.3);
            line-height: 1;
        }
        .owner-marker-container {
            height: 5%;
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: flex-end;
        }
        .owner-marker {
            width: 80%;
            height: 5px;
            border-top: 1px solid black;
        }

        .corner { font-weight: bold; font-size: 14px; }
        .corner .content { height: 80%; }
        .corner .token-container { height: 20%; }

        .property .color-bar { height: 15px; width: 100%; border-bottom: 1px solid #333; margin-bottom: 1px; }
        .property .name { flex-grow: 1; display: flex; align-items: center; justify-content: center; padding: 1px 0; font-weight: 500; width: 100%; }
        .property .price { font-weight: 600; margin-top: 1px; }

        /* Grid position styles */
        .row-1 { grid-row: 1; } .row-11 { grid-row: 11; } .col-1 { grid-column: 1; } .col-11 { grid-column: 11; }
        .space-go { grid-column: 11; grid-row: 11; } .space-old-kent-road { grid-column: 10; grid-row: 11; } .space-community-chest-bottom { grid-column: 9; grid-row: 11; } .space-whitechapel-road { grid-column: 8; grid-row: 11; } .space-income-tax { grid-column: 7; grid-row: 11; } .space-kings-cross { grid-column: 6; grid-row: 11; } .space-the-angel-islington { grid-column: 5; grid-row: 11; } .space-chance-bottom { grid-column: 4; grid-row: 11; } .space-euston-road { grid-column: 3; grid-row: 11; } .space-pentonville-road { grid-column: 2; grid-row: 11; } .space-jail { grid-column: 1; grid-row: 11; }
        .space-pall-mall { grid-column: 1; grid-row: 10; } .space-electric-company { grid-column: 1; grid-row: 9; } .space-whitehall { grid-column: 1; grid-row: 8; } .space-northumberland-avenue { grid-column: 1; grid-row: 7; } .space-marylebone-station { grid-column: 1; grid-row: 6; } .space-bow-street { grid-column: 1; grid-row: 5; } .space-community-chest-left { grid-column: 1; grid-row: 4; } .space-marlborough-street { grid-column: 1; grid-row: 3; } .space-vine-street { grid-column: 1; grid-row: 2; } .space-free-parking { grid-column: 1; grid-row: 1; }
        .space-strand { grid-column: 2; grid-row: 1; } .space-chance-top { grid-column: 3; grid-row: 1; } .space-fleet-street { grid-column: 4; grid-row: 1; } .space-trafalgar-square { grid-column: 5; grid-row: 1; } .space-fenchurch-st-station { grid-column: 6; grid-row: 1; } .space-leicester-square { grid-column: 7; grid-row: 1; } .space-coventry-street { grid-column: 8; grid-row: 1; } .space-water-works { grid-column: 9; grid-row: 1; } .space-piccadilly { grid-column: 10; grid-row: 1; } .space-go-to-jail { grid-column: 11; grid-row: 1; }
        .space-regent-street { grid-column: 11; grid-row: 2; } .space-oxford-street { grid-column: 11; grid-row: 3; } .space-community-chest-right { grid-column: 11; grid-row: 4; } .space-bond-street { grid-column: 11; grid-row: 5; } .space-liverpool-st-station { grid-column: 11; grid-row: 6; } .space-chance-right { grid-column: 11; grid-row: 7; } .space-park-lane { grid-column: 11; grid-row: 8; } .space-super-tax { grid-column: 11; grid-row: 9; } .space-mayfair { grid-column: 11; grid-row: 10; }

        /* Text rotation styles */
        .left-col .content .name, .right-col .content .name, .left-col .content .price, .right-col .content .price, .left-col.space .content > div:not(.color-bar):not(.name):not(.price), .right-col.space .content > div:not(.color-bar):not(.name):not(.price) { font-size: 7.5px; line-height: 1.1; }
        .left-col .content .name, .right-col .content .name { text-align: center; white-space: normal; width: 22px; margin: 1px 0; }
        .left-col.property .content .name, .left-col.space .content .station-icon + div, .left-col.space .content .utility-icon + div, .left-col.space .content .tax-icon + div, .left-col.space .content .chance-icon + div, .left-col.space .content .community-chest-icon + div { transform: rotate(90deg); }
        .right-col.property .content .name, .right-col.space .content .station-icon + div, .right-col.space .content .utility-icon + div, .right-col.space .content .tax-icon + div, .right-col.space .content .chance-icon + div, .right-col.space .content .community-chest-icon + div { transform: rotate(-90deg); }
        .left-col .content .price, .right-col .content .price { transform: none !important; }
        .top-row.property .content .name, .top-row.space .content .station-icon + div, .top-row.space .content .utility-icon + div { transform: rotate(180deg); }
        .top-row .content .price { transform: rotate(180deg); }
        .space-jail .just { position: absolute; top: 15px; left: 5px; transform: rotate(45deg); font-size: 10px;}
        .space-jail .visiting { position: absolute; bottom: 15px; right: 5px; transform: rotate(45deg); font-size: 10px;}
        .space-go .arrow { font-size: 30px; color: #d60000; line-height: 1; }

        /* Center Area */
        .center-area { grid-column: 2 / span 9; grid-row: 2 / span 9; background-color: #ddebe0; display: flex; flex-direction: column; align-items: center; justify-content: space-around; border: 2px solid black; padding: 20px; }
        .game-title { font-size: 48px; font-weight: bold; color: #d60000; text-shadow: 2px 2px #000; letter-spacing: 2px; }
        .card-pile-placeholder { width: 150px; height: 100px; border: 2px dashed #555; display: flex; flex-direction:column; align-items: center; justify-content: center; text-align: center; border-radius: 8px; background-color: #f0f0f0; font-weight: 500; }
        .card-piles-container { display: flex; justify-content: space-around; width: 100%; }

        /* Color definitions */
        .brown { background-color: #955436; } .light-blue { background-color: #aae0fa; } .pink { background-color: #d93a96; } .orange { background-color: #f7941d; } .red { background-color: #ed1b24; } .yellow { background-color: #fff200; } .green { background-color: #1fb25a; } .dark-blue { background-color: #0072bb; }

        /* Icons */
        .station-icon, .utility-icon, .tax-icon, .chance-icon, .community-chest-icon { font-size: 20px; margin-bottom: 3px; }
        .station-icon::before { content: "üöÇ"; } .utility-icon.electric::before { content: "üí°"; } .utility-icon.water::before { content: "üíß"; } .tax-icon.income::before { content: "üí∏"; } .tax-icon.super::before { content: "üíé"; } .chance-icon::before { content: "‚ùì"; } .community-chest-icon::before { content: "üéÅ"; }

        /* Game Controls & Player Info */
        .game-controls { background-color: #f0e6d2; padding: 20px; border-radius: 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.15); width: 100%; max-width: 800px; margin-top: 20px; text-align: center; }
        .player-info-container { display: flex; justify-content: space-around; margin-bottom: 15px; flex-wrap: wrap; gap: 10px; }
        .player-info { background-color: #fff; border: 2px solid #ccc; padding: 10px 15px; border-radius: 8px; min-width: 160px; text-align: left; box-shadow: inset 0 0 5px rgba(0,0,0,0.1); }
        .player-info.active-player { border-color: #d60000; box-shadow: 0 0 10px #d60000; }
        .player-info h3 { margin-top: 0; font-size: 1.1em; font-weight: 600; border-bottom: 1px solid #eee; padding-bottom: 5px; margin-bottom: 8px; }
        .player-info p { font-size: 0.9em; margin: 4px 0;}
        .dice-area { margin: 15px 0; }
        .dice-area span { display: inline-block; width: 40px; height: 40px; line-height: 40px; text-align: center; border: 1px solid #333; background-color: white; font-size: 20px; font-weight: bold; margin: 0 5px; border-radius: 5px; }
        #rollDiceButton, .modal-button { background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 5px; font-size: 1em; cursor: pointer; transition: background-color 0.3s ease; box-shadow: 0 2px 5px rgba(0,0,0,0.2); margin: 5px;}
        #rollDiceButton:hover, .modal-button:hover { background-color: #45a049; }
        #rollDiceButton:disabled { background-color: #ccc; cursor: not-allowed; }
        .modal-button.secondary { background-color: #f44336; }
        .modal-button.secondary:hover { background-color: #d32f2f; }
        .message-log { margin-top: 15px; padding: 10px; background-color: #fff; border: 1px solid #ddd; border-radius: 5px; min-height: 50px; text-align: left; font-size: 0.9em; max-height: 100px; overflow-y: auto;}

        /* Modal Styles */
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); display: flex; align-items: center; justify-content: center; z-index: 1000; opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease; }
        .modal-overlay.visible { opacity: 1; visibility: visible; }
        .modal-content { background-color: #fff; padding: 25px; border-radius: 10px; box-shadow: 0 5px 25px rgba(0,0,0,0.3); width: 90%; max-width: 450px; text-align: center; transform: translateY(-50px) scale(0.95); transition: transform 0.3s ease-out; border-top: 10px solid #d60000; }
        .modal-overlay.visible .modal-content { transform: translateY(0) scale(1); }
        .modal-title { font-size: 1.8em; font-weight: bold; color: #333; margin-bottom: 15px; }
        .modal-message { font-size: 1.1em; color: #555; margin-bottom: 20px; line-height: 1.6; }
        .modal-buttons { display: flex; justify-content: center; gap: 15px; flex-wrap: wrap; }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="board">
            <div id="space-0" class="space corner space-go"> <div class="content"> <div>COLLECT ¬£200 SALARY AS YOU PASS</div> <div class="arrow">‚ûî</div> <div>GO</div> </div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-1" class="space property space-old-kent-road"> <div class="content"> <div class="color-bar brown"></div> <div class="name">OLD KENT ROAD</div> <div class="price">¬£60</div> </div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-2" class="space space-community-chest-bottom"> <div class="content"><div class="community-chest-icon"></div><div>COMMUNITY CHEST</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-3" class="space property space-whitechapel-road"> <div class="content"><div class="color-bar brown"></div><div class="name">WHITECHAPEL ROAD</div><div class="price">¬£60</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-4" class="space space-income-tax"> <div class="content"><div class="tax-icon income"></div><div>INCOME TAX</div><div>PAY ¬£200</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-5" class="space space-kings-cross"> <div class="content"><div class="station-icon"></div><div>KING'S CROSS STATION</div><div class="price">¬£200</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-6" class="space property space-the-angel-islington"> <div class="content"><div class="color-bar light-blue"></div><div class="name">THE ANGEL,<br>ISLINGTON</div><div class="price">¬£100</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-7" class="space space-chance-bottom"> <div class="content"><div class="chance-icon"></div><div>CHANCE</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-8" class="space property space-euston-road"> <div class="content"><div class="color-bar light-blue"></div><div class="name">EUSTON ROAD</div><div class="price">¬£100</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-9" class="space property space-pentonville-road"> <div class="content"><div class="color-bar light-blue"></div><div class="name">PENTONVILLE ROAD</div><div class="price">¬£120</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-10" class="space corner space-jail"> <div class="content"><div class="just">JUST</div><div style="font-size:30px; border: 3px solid black; padding:10px; margin-top:10px; margin-bottom:10px; width: 60%; height: 60%; display:flex; align-items:center; justify-content:center;">üëÆ</div><div class="visiting">VISITING</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-11" class="space property left-col space-pall-mall"> <div class="content"><div class="color-bar pink"></div><div class="name">PALL MALL</div><div class="price">¬£140</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-12" class="space left-col space-electric-company"> <div class="content"><div class="utility-icon electric"></div><div>ELECTRIC COMPANY</div><div class="price">¬£150</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-13" class="space property left-col space-whitehall"> <div class="content"><div class="color-bar pink"></div><div class="name">WHITEHALL</div><div class="price">¬£140</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-14" class="space property left-col space-northumberland-avenue"> <div class="content"><div class="color-bar pink"></div><div class="name">NORTHUMBERLAND<br>AVENUE</div><div class="price">¬£160</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-15" class="space left-col space-marylebone-station"> <div class="content"><div class="station-icon"></div><div>MARYLEBONE STATION</div><div class="price">¬£200</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-16" class="space property left-col space-bow-street"> <div class="content"><div class="color-bar orange"></div><div class="name">BOW STREET</div><div class="price">¬£180</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-17" class="space left-col space-community-chest-left"> <div class="content"><div class="community-chest-icon"></div><div>COMMUNITY CHEST</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-18" class="space property left-col space-marlborough-street"> <div class="content"><div class="color-bar orange"></div><div class="name">MARLBOROUGH STREET</div><div class="price">¬£180</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-19" class="space property left-col space-vine-street"> <div class="content"><div class="color-bar orange"></div><div class="name">VINE STREET</div><div class="price">¬£200</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-20" class="space corner space-free-parking"> <div class="content"><div>FREE</div><div style="font-size: 30px;">üÖøÔ∏è</div><div>PARKING</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-21" class="space property top-row space-strand"> <div class="content"><div class="color-bar red"></div><div class="name">STRAND</div><div class="price">¬£220</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-22" class="space top-row space-chance-top"> <div class="content"><div class="chance-icon"></div><div>CHANCE</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-23" class="space property top-row space-fleet-street"> <div class="content"><div class="color-bar red"></div><div class="name">FLEET STREET</div><div class="price">¬£220</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-24" class="space property top-row space-trafalgar-square"> <div class="content"><div class="color-bar red"></div><div class="name">TRAFALGAR SQUARE</div><div class="price">¬£240</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-25" class="space top-row space-fenchurch-st-station"> <div class="content"><div class="station-icon"></div><div>FENCHURCH ST.<br>STATION</div><div class="price">¬£200</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-26" class="space property top-row space-leicester-square"> <div class="content"><div class="color-bar yellow"></div><div class="name">LEICESTER SQUARE</div><div class="price">¬£260</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-27" class="space property top-row space-coventry-street"> <div class="content"><div class="color-bar yellow"></div><div class="name">COVENTRY STREET</div><div class="price">¬£260</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-28" class="space top-row space-water-works"> <div class="content"><div class="utility-icon water"></div><div>WATER WORKS</div><div class="price">¬£150</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-29" class="space property top-row space-piccadilly"> <div class="content"><div class="color-bar yellow"></div><div class="name">PICCADILLY</div><div class="price">¬£280</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-30" class="space corner space-go-to-jail"> <div class="content"><div>GO TO</div><div style="font-size: 30px;">üöì</div><div>JAIL</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-31" class="space property right-col space-regent-street"> <div class="content"><div class="color-bar green"></div><div class="name">REGENT STREET</div><div class="price">¬£300</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-32" class="space property right-col space-oxford-street"> <div class="content"><div class="color-bar green"></div><div class="name">OXFORD STREET</div><div class="price">¬£300</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-33" class="space right-col space-community-chest-right"> <div class="content"><div class="community-chest-icon"></div><div>COMMUNITY CHEST</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-34" class="space property right-col space-bond-street"> <div class="content"><div class="color-bar green"></div><div class="name">BOND STREET</div><div class="price">¬£320</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-35" class="space right-col space-liverpool-st-station"> <div class="content"><div class="station-icon"></div><div>LIVERPOOL ST.<br>STATION</div><div class="price">¬£200</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-36" class="space right-col space-chance-right"> <div class="content"><div class="chance-icon"></div><div>CHANCE</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-37" class="space property right-col space-park-lane"> <div class="content"><div class="color-bar dark-blue"></div><div class="name">PARK LANE</div><div class="price">¬£350</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>
            <div id="space-38" class="space right-col space-super-tax"> <div class="content"><div class="tax-icon super"></div><div>SUPER TAX</div><div>PAY ¬£100</div></div> <div class="token-container"></div> <div class="owner-marker-container"></div> </div>
            <div id="space-39" class="space property right-col space-mayfair"> <div class="content"><div class="color-bar dark-blue"></div><div class="name">MAYFAIR</div><div class="price">¬£400</div></div> <div class="token-container"></div> <div class="owner-marker-container"><div class="owner-marker"></div></div> </div>

            <div class="center-area">
                <div class="game-title">MONOPOLY</div>
                <div class="card-piles-container">
                    <div id="chanceCardPile" class="card-pile-placeholder">CHANCE</div>
                    <div id="communityChestCardPile" class="card-pile-placeholder">COMMUNITY CHEST</div>
                </div>
            </div>
        </div>

        <div class="game-controls">
            <div id="playerInfoContainer" class="player-info-container"></div>
            <div class="current-player-turn mb-4">
                Current Turn: <strong id="currentPlayerName">Player 1</strong>
            </div>
            <div class="dice-area">
                Dice: <span id="dice1Display">-</span> <span id="dice2Display">-</span>
                Total: <strong id="diceTotalDisplay">-</strong>
            </div>
            <button id="rollDiceButton">Roll Dice</button>
            <div id="messageLog" class="message-log">Welcome to Monopoly! Player 1's turn.</div>
        </div>
    </div>

    <div id="eventModal" class="modal-overlay">
        <div class="modal-content">
            <h2 id="modalTitle" class="modal-title">Event!</h2>
            <p id="modalMessage" class="modal-message">Something happened!</p>
            <div id="modalButtons" class="modal-buttons"></div>
        </div>
    </div>

    <script>
        // --- Game Constants ---
        const TOTAL_SPACES = 40;
        const PASS_GO_SALARY = 200;
        const STARTING_MONEY = 1500;
        const PLAYER_REPRESENTATIONS = ['üêé', 'üêÜ', 'üêò', 'üêÖ', 'üêí', 'üêï'];
        const PLAYER_UI_COLORS = ['#FF0000', '#0000FF', '#00AA00', '#FF8C00', '#800080', '#D2691E'];
        const JAIL_POSITION = 10;
        const GO_POSITION = 0;
        const KINGS_CROSS_POSITION = 5;
        const MARYLEBONE_POSITION = 15;
        const FENCHURCH_ST_POSITION = 25;
        const LIVERPOOL_ST_POSITION = 35;
        const PALL_MALL_POSITION = 11;
        const MAYFAIR_POSITION = 39;
        const TRAFALGAR_SQ_POSITION = 24;
        const ELECTRIC_COMPANY_POSITION = 12;
        const WATER_WORKS_POSITION = 28;


        // --- Game State Variables ---
        let players = [];
        let currentPlayerIndex = 0;
        let dice = [0, 0];
        let gameInitialized = false;
        let boardData = [];
        let chanceCards = [];
        let communityChestCards = [];
        let chanceCardIndex = 0; // To cycle through cards
        let communityChestCardIndex = 0;


        // --- DOM Elements ---
        const rollDiceButton = document.getElementById('rollDiceButton');
        const dice1Display = document.getElementById('dice1Display');
        const dice2Display = document.getElementById('dice2Display');
        const diceTotalDisplay = document.getElementById('diceTotalDisplay');
        const currentPlayerNameDisplay = document.getElementById('currentPlayerName');
        const playerInfoContainer = document.getElementById('playerInfoContainer');
        const messageLog = document.getElementById('messageLog');
        const eventModal = document.getElementById('eventModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalMessage = document.getElementById('modalMessage');
        const modalButtons = document.getElementById('modalButtons');
        const chanceCardPileDisplay = document.getElementById('chanceCardPile');
        const communityChestCardPileDisplay = document.getElementById('communityChestCardPile');


        // --- Card Definitions ---
        function initializeDecks() {
            // Standard British Chance Cards (simplified/adapted)
            chanceCards = [
                { text: "Advance to Go (Collect ¬£200).", type: "moveTo", value: GO_POSITION, collectGo: true },
                { text: "Advance to Trafalgar Square. If you pass Go, collect ¬£200.", type: "moveTo", value: TRAFALGAR_SQ_POSITION, collectGo: true },
                { text: "Advance to Mayfair.", type: "moveTo", value: MAYFAIR_POSITION, collectGo: false }, // Usually no GO collection for direct advance this far
                { text: "Advance to Pall Mall. If you pass Go, collect ¬£200.", type: "moveTo", value: PALL_MALL_POSITION, collectGo: true },
                { text: "Advance to the nearest Station. If unowned, you may buy it from the Bank. If owned, pay owner twice the rental to which they are otherwise entitled.", type: "moveToNearest", value: "station", subType: "payDoubleRentOrBuy" },
                { text: "Advance to the nearest Utility. If unowned, you may buy it from the Bank. If owned, throw dice and pay owner a total ten times amount thrown.", type: "moveToNearest", value: "utility", subType: "payDiceRollRentOrBuy" },
                { text: "Bank pays you dividend of ¬£50.", type: "collectMoney", value: 50 },
                { text: "Get Out of Jail Free. This card may be kept until needed or sold.", type: "getOutOfJailFree" },
                { text: "Go Back 3 Spaces.", type: "moveSpaces", value: -3 },
                { text: "Go to Jail. Go directly to Jail, do not pass Go, do not collect ¬£200.", type: "goToJail" },
                { text: "Make general repairs on all your property ‚Äì for each house pay ¬£25 ‚Äì for each hotel pay ¬£100.", type: "streetRepairs", houseCost: 25, hotelCost: 100 },
                { text: "Pay poor tax of ¬£15.", type: "payMoney", value: 15 },
                { text: "Take a trip to King's Cross Station. If you pass Go, collect ¬£200.", type: "moveTo", value: KINGS_CROSS_POSITION, collectGo: true },
                { text: "You have been elected Chairman of the Board. Pay each player ¬£50.", type: "payEachPlayer", value: 50 },
                { text: "Your building loan matures. Collect ¬£150.", type: "collectMoney", value: 150 },
                // { text: "You have won a crossword competition. Collect ¬£100.", type: "collectMoney", value: 100 } // Often included
            ];

            // Standard British Community Chest Cards (simplified/adapted)
            communityChestCards = [
                { text: "Advance to Go (Collect ¬£200).", type: "moveTo", value: GO_POSITION, collectGo: true },
                { text: "Bank error in your favour. Collect ¬£200.", type: "collectMoney", value: 200 },
                { text: "Doctor's fee. Pay ¬£50.", type: "payMoney", value: 50 },
                { text: "From sale of stock you get ¬£50.", type: "collectMoney", value: 50 },
                { text: "Get Out of Jail Free. This card may be kept until needed or sold.", type: "getOutOfJailFree" },
                { text: "Go to Jail. Go directly to Jail, do not pass Go, do not collect ¬£200.", type: "goToJail" },
                { text: "Grand Opera Night. Collect ¬£50 from every player for opening night seats.", type: "collectFromPlayers", value: 50 },
                { text: "Holiday Fund matures. Receive ¬£100.", type: "collectMoney", value: 100 },
                { text: "Income tax refund. Collect ¬£20.", type: "collectMoney", value: 20 },
                { text: "It is your birthday. Collect ¬£10 from each player.", type: "collectFromPlayers", value: 10 }, // Simplified from "Life insurance matures"
                { text: "Pay hospital fees of ¬£100.", type: "payMoney", value: 100 },
                { text: "Pay school fees of ¬£50.", type: "payMoney", value: 50 }, // Simplified from "Pay school fees of ¬£150"
                { text: "Receive ¬£25 consultancy fee.", type: "collectMoney", value: 25 },
                { text: "You are assessed for street repairs. ¬£40 per house, ¬£115 per hotel.", type: "streetRepairs", houseCost: 40, hotelCost: 115 },
                { text: "You have won second prize in a beauty contest. Collect ¬£10.", type: "collectMoney", value: 10 },
                // { text: "You inherit ¬£100.", type: "collectMoney", value: 100 } // Often included
            ];

            shuffleDeck(chanceCards);
            shuffleDeck(communityChestCards);
            updateCardPileDisplays();
        }

        function shuffleDeck(deck) {
            for (let i = deck.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [deck[i], deck[j]] = [deck[j], deck[i]]; // Swap elements
            }
        }

        function drawCard(deckType) {
            let card;
            if (deckType === 'chance') {
                card = chanceCards[chanceCardIndex];
                chanceCardIndex = (chanceCardIndex + 1) % chanceCards.length;
            } else { // community-chest
                card = communityChestCards[communityChestCardIndex];
                communityChestCardIndex = (communityChestCardIndex + 1) % communityChestCards.length;
            }
            // In a real game, drawn "Get Out of Jail Free" cards are removed from the deck until used.
            // For simplicity now, we'll just cycle. This can be enhanced.
            logMessage(`${players[currentPlayerIndex].name} drew a ${deckType} card: "${card.text}"`);
            updateCardPileDisplays();
            return card;
        }
        
        function updateCardPileDisplays() {
            chanceCardPileDisplay.innerHTML = `CHANCE <br> (${chanceCards.length - chanceCardIndex} left)`;
            communityChestCardPileDisplay.innerHTML = `COMMUNITY CHEST <br> (${communityChestCards.length - communityChestCardIndex} left)`;
        }


        // --- Board Data Initialization (same as before) ---
        function initializeBoardData() {
            boardData = [
                { id: 'space-0', name: "GO", type: "go", group: "corner" },
                { id: 'space-1', name: "Old Kent Road", type: "property", price: 60, rent: [2, 10, 30, 90, 160, 250], group: "brown", ownerId: null, houseCost: 50, houses: 0 },
                { id: 'space-2', name: "Community Chest", type: "community-chest", group: "event" },
                { id: 'space-3', name: "Whitechapel Road", type: "property", price: 60, rent: [4, 20, 60, 180, 320, 450], group: "brown", ownerId: null, houseCost: 50, houses: 0 },
                { id: 'space-4', name: "Income Tax", type: "tax", amount: 200, group: "event" },
                { id: 'space-5', name: "King's Cross Station", type: "station", price: 200, rent: [25, 50, 100, 200], group: "station", ownerId: null },
                { id: 'space-6', name: "The Angel, Islington", type: "property", price: 100, rent: [6, 30, 90, 270, 400, 550], group: "light-blue", ownerId: null, houseCost: 50, houses: 0 },
                { id: 'space-7', name: "Chance", type: "chance", group: "event" },
                { id: 'space-8', name: "Euston Road", type: "property", price: 100, rent: [6, 30, 90, 270, 400, 550], group: "light-blue", ownerId: null, houseCost: 50, houses: 0 },
                { id: 'space-9', name: "Pentonville Road", type: "property", price: 120, rent: [8, 40, 100, 300, 450, 600], group: "light-blue", ownerId: null, houseCost: 50, houses: 0 },
                { id: 'space-10', name: "Jail / Just Visiting", type: "jail", group: "corner" },
                { id: 'space-11', name: "Pall Mall", type: "property", price: 140, rent: [10, 50, 150, 450, 625, 750], group: "pink", ownerId: null, houseCost: 100, houses: 0 },
                { id: 'space-12', name: "Electric Company", type: "utility", price: 150, group: "utility", ownerId: null },
                { id: 'space-13', name: "Whitehall", type: "property", price: 140, rent: [10, 50, 150, 450, 625, 750], group: "pink", ownerId: null, houseCost: 100, houses: 0 },
                { id: 'space-14', name: "Northumberland Avenue", type: "property", price: 160, rent: [12, 60, 180, 500, 700, 900], group: "pink", ownerId: null, houseCost: 100, houses: 0 },
                { id: 'space-15', name: "Marylebone Station", type: "station", price: 200, rent: [25, 50, 100, 200], group: "station", ownerId: null },
                { id: 'space-16', name: "Bow Street", type: "property", price: 180, rent: [14, 70, 200, 550, 750, 950], group: "orange", ownerId: null, houseCost: 100, houses: 0 },
                { id: 'space-17', name: "Community Chest", type: "community-chest", group: "event" },
                { id: 'space-18', name: "Marlborough Street", type: "property", price: 180, rent: [14, 70, 200, 550, 750, 950], group: "orange", ownerId: null, houseCost: 100, houses: 0 },
                { id: 'space-19', name: "Vine Street", type: "property", price: 200, rent: [16, 80, 220, 600, 800, 1000], group: "orange", ownerId: null, houseCost: 100, houses: 0 },
                { id: 'space-20', name: "Free Parking", type: "free-parking", group: "corner" },
                { id: 'space-21', name: "Strand", type: "property", price: 220, rent: [18, 90, 250, 700, 875, 1050], group: "red", ownerId: null, houseCost: 150, houses: 0 },
                { id: 'space-22', name: "Chance", type: "chance", group: "event" },
                { id: 'space-23', name: "Fleet Street", type: "property", price: 220, rent: [18, 90, 250, 700, 875, 1050], group: "red", ownerId: null, houseCost: 150, houses: 0 },
                { id: 'space-24', name: "Trafalgar Square", type: "property", price: 240, rent: [20, 100, 300, 750, 925, 1100], group: "red", ownerId: null, houseCost: 150, houses: 0 },
                { id: 'space-25', name: "Fenchurch St. Station", type: "station", price: 200, rent: [25, 50, 100, 200], group: "station", ownerId: null },
                { id: 'space-26', name: "Leicester Square", type: "property", price: 260, rent: [22, 110, 330, 800, 975, 1150], group: "yellow", ownerId: null, houseCost: 150, houses: 0 },
                { id: 'space-27', name: "Coventry Street", type: "property", price: 260, rent: [22, 110, 330, 800, 975, 1150], group: "yellow", ownerId: null, houseCost: 150, houses: 0 },
                { id: 'space-28', name: "Water Works", type: "utility", price: 150, group: "utility", ownerId: null },
                { id: 'space-29', name: "Piccadilly", type: "property", price: 280, rent: [24, 120, 360, 850, 1025, 1200], group: "yellow", ownerId: null, houseCost: 150, houses: 0 },
                { id: 'space-30', name: "Go To Jail", type: "go-to-jail", group: "corner" },
                { id: 'space-31', name: "Regent Street", type: "property", price: 300, rent: [26, 130, 390, 900, 1100, 1275], group: "green", ownerId: null, houseCost: 200, houses: 0 },
                { id: 'space-32', name: "Oxford Street", type: "property", price: 300, rent: [26, 130, 390, 900, 1100, 1275], group: "green", ownerId: null, houseCost: 200, houses: 0 },
                { id: 'space-33', name: "Community Chest", type: "community-chest", group: "event" },
                { id: 'space-34', name: "Bond Street", type: "property", price: 320, rent: [28, 150, 450, 1000, 1200, 1400], group: "green", ownerId: null, houseCost: 200, houses: 0 },
                { id: 'space-35', name: "Liverpool St. Station", type: "station", price: 200, rent: [25, 50, 100, 200], group: "station", ownerId: null },
                { id: 'space-36', name: "Chance", type: "chance", group: "event" },
                { id: 'space-37', name: "Park Lane", type: "property", price: 350, rent: [35, 175, 500, 1100, 1300, 1500], group: "dark-blue", ownerId: null, houseCost: 200, houses: 0 },
                { id: 'space-38', name: "Super Tax", type: "tax", amount: 100, group: "event" },
                { id: 'space-39', name: "Mayfair", type: "property", price: 400, rent: [50, 200, 600, 1400, 1700, 2000], group: "dark-blue", ownerId: null, houseCost: 200, houses: 0 }
            ];
            boardData.forEach(space => {
                if (!('ownerId' in space) && (space.type === 'property' || space.type === 'station' || space.type === 'utility')) {
                    space.ownerId = null;
                }
                if (space.type === 'property' && !('houses' in space)) { // Ensure all properties have houses field
                    space.houses = 0; // 0 for no houses, 5 for hotel
                }
            });
        }


        // --- Modal Functions (same as before) ---
        function showModal(title, message, buttonsConfig = [{ text: "OK", action: hideModal }]) {
            modalTitle.textContent = title;
            modalMessage.innerHTML = message;
            modalButtons.innerHTML = '';
            buttonsConfig.forEach(btnConfig => {
                const button = document.createElement('button');
                button.textContent = btnConfig.text;
                button.classList.add('modal-button');
                if (btnConfig.class) button.classList.add(btnConfig.class);
                button.onclick = () => {
                    if (btnConfig.action) btnConfig.action(); // Execute action first
                    hideModal(); // Then hide modal
                };
                modalButtons.appendChild(button);
            });
            eventModal.classList.add('visible');
        }
        function hideModal() { eventModal.classList.remove('visible'); }

        // --- Game Initialization (includes initializeDecks) ---
        function initializeGame(numPlayers = 2) {
            if (gameInitialized) { logMessage("Game already initialized."); return; }
            initializeBoardData();
            initializeDecks(); // Initialize and shuffle decks
            players = [];
            currentPlayerIndex = 0;
            playerInfoContainer.innerHTML = '';
            document.querySelectorAll('.player-token').forEach(token => token.remove());
            document.querySelectorAll('.owner-marker').forEach(marker => marker.style.backgroundColor = 'transparent');

            for (let i = 0; i < numPlayers; i++) {
                const player = {
                    id: i, name: `Player ${i + 1}`,
                    tokenRepresentation: PLAYER_REPRESENTATIONS[i % PLAYER_REPRESENTATIONS.length],
                    uiColor: PLAYER_UI_COLORS[i % PLAYER_UI_COLORS.length],
                    money: STARTING_MONEY, currentPosition: 0, propertiesOwned: [],
                    inJail: false, jailTurns: 0, getOutOfJailFreeCards: 0,
                    tokenElement: null, infoElement: null
                };
                players.push(player);
                createPlayerToken(player);
                createPlayerInfoDisplay(player);
            }
            updateAllPlayerInfoDisplays();
            updateCurrentPlayerDisplay();
            logMessage(`Monopoly game started with ${numPlayers} players. ${players[0].name}'s turn.`);
            gameInitialized = true;
            rollDiceButton.disabled = false;
        }

        // --- Player Token and Info Display Functions (largely same, added GOOJFC display) ---
        function createPlayerToken(player) { /* ... same as before ... */ 
            const token = document.createElement('div');
            token.classList.add('player-token');
            token.innerHTML = player.tokenRepresentation;
            token.setAttribute('title', player.name);
            player.tokenElement = token;
            placeTokenOnBoard(player);
        }
        function createPlayerInfoDisplay(player) {
            const infoDiv = document.createElement('div');
            infoDiv.classList.add('player-info');
            infoDiv.id = `player-info-${player.id}`;
            infoDiv.innerHTML = `
                <h3 style="color: ${player.uiColor};">${player.name} (${player.tokenRepresentation})</h3>
                <p>Money: <span class="money-display">¬£${player.money}</span></p>
                <p>Position: <span class="position-display">GO</span></p>
                <p>Properties: <span class="properties-display">0</span></p>
                <p>GOOJFC: <span class="goojfc-display">0</span></p> `;
            player.infoElement = infoDiv;
            playerInfoContainer.appendChild(infoDiv);
        }
        function updatePlayerInfoDisplay(player) {
            if (player.infoElement) {
                player.infoElement.querySelector('.money-display').textContent = `¬£${player.money}`;
                const spaceData = boardData[player.currentPosition];
                player.infoElement.querySelector('.position-display').textContent = spaceData.name.split('<br>')[0];
                player.infoElement.querySelector('.properties-display').textContent = player.propertiesOwned.length;
                player.infoElement.querySelector('.goojfc-display').textContent = player.getOutOfJailFreeCards;
            }
            document.querySelectorAll('.player-info').forEach(el => el.classList.remove('active-player'));
            if (players[currentPlayerIndex] && players[currentPlayerIndex].infoElement) {
                players[currentPlayerIndex].infoElement.classList.add('active-player');
            }
        }
        function updateAllPlayerInfoDisplays() { players.forEach(p => updatePlayerInfoDisplay(p)); }
        function placeTokenOnBoard(player) { /* ... same as before ... */ 
            const currentSpaceHtmlId = boardData[player.currentPosition].id;
            const spaceElement = document.getElementById(currentSpaceHtmlId);
            if (spaceElement) {
                const tokenContainer = spaceElement.querySelector('.token-container');
                if (tokenContainer) {
                    if (player.tokenElement.parentNode) {
                        player.tokenElement.parentNode.removeChild(player.tokenElement);
                    }
                    tokenContainer.appendChild(player.tokenElement);
                }
            }
        }
        function updateOwnerMarker(spaceIndex) { /* ... same as before ... */ 
            const spaceData = boardData[spaceIndex];
            const spaceElement = document.getElementById(spaceData.id);
            if (spaceElement && (spaceData.type === 'property' || spaceData.type === 'station' || spaceData.type === 'utility')) {
                const ownerMarkerElement = spaceElement.querySelector('.owner-marker');
                if (ownerMarkerElement) {
                    if (spaceData.ownerId !== null && players[spaceData.ownerId]) {
                        ownerMarkerElement.style.backgroundColor = players[spaceData.ownerId].uiColor;
                    } else {
                        ownerMarkerElement.style.backgroundColor = 'transparent';
                    }
                }
            }
        }

        // --- Dice Rolling and Turn Management ---
        function rollDice() { /* ... same as before ... */ 
            dice[0] = Math.floor(Math.random() * 6) + 1;
            dice[1] = Math.floor(Math.random() * 6) + 1;
            dice1Display.textContent = dice[0];
            dice2Display.textContent = dice[1];
            diceTotalDisplay.textContent = dice[0] + dice[1];
            return dice;
        }
        function handlePlayerTurn() { /* ... largely same, jail logic placeholder ... */ 
            if (!gameInitialized) { logMessage("Please initialize the game first."); return; }
            rollDiceButton.disabled = true;

            const currentPlayer = players[currentPlayerIndex];
            if (currentPlayer.inJail) {
                // Basic Jail Logic: Option to pay, use card, or roll for doubles
                // For now, we'll add a modal for this.
                handleJailTurn(currentPlayer);
                return;
            }

            const diceResult = rollDice();
            const steps = diceResult[0] + diceResult[1];
            logMessage(`${currentPlayer.name} (${currentPlayer.tokenRepresentation}) rolled ${diceResult[0]} + ${diceResult[1]} = ${steps}.`);

            const oldPosition = currentPlayer.currentPosition;
            let newPosition = (oldPosition + steps) % TOTAL_SPACES;
            
            // If landed on "Go To Jail" space (index 30), newPosition is updated by goToJail function
            // So, check for passing GO *before* potentially being sent to jail by a card/space
            if (boardData[newPosition].type !== 'go-to-jail' && newPosition < oldPosition && oldPosition + steps >= TOTAL_SPACES) {
                 // Check if the movement actually crossed index 0
                if (!(oldPosition + steps === TOTAL_SPACES + newPosition)) { // Avoid double collection if landing on GO
                    currentPlayer.money += PASS_GO_SALARY;
                    logMessage(`${currentPlayer.name} passed GO and collected ¬£${PASS_GO_SALARY}.`);
                }
            }
            currentPlayer.currentPosition = newPosition;


            placeTokenOnBoard(currentPlayer);
            updatePlayerInfoDisplay(currentPlayer); // Update after potential GO collection
            logMessage(`${currentPlayer.name} landed on ${boardData[currentPlayer.currentPosition].name.split('<br>')[0]}.`);
            handleLandingOnSpace(currentPlayer);
        }

        // --- Landing Actions ---
        function handleLandingOnSpace(player) {
            const space = boardData[player.currentPosition];
            let subsequentAction = () => endTurnActions(); // Default action after modal

            switch (space.type) {
                case 'property': case 'station': case 'utility':
                    handleOwnableSpace(player, space); // This function will set its own subsequentAction or call endTurnActions
                    return; // handleOwnableSpace manages its own flow
                case 'go-to-jail':
                    goToJail(player); // This also manages its own flow
                    return;
                case 'chance':
                    const chanceCard = drawCard('chance');
                    showModal("Chance Card!", chanceCard.text, [{ text: "OK", action: () => applyCardEffect(player, chanceCard) }]);
                    return; // applyCardEffect will call endTurnActions
                case 'community-chest':
                    const communityCard = drawCard('community-chest');
                    showModal("Community Chest Card!", communityCard.text, [{ text: "OK", action: () => applyCardEffect(player, communityCard) }]);
                    return; // applyCardEffect will call endTurnActions
                case 'tax':
                    payTax(player, space); // Manages its own flow
                    return;
                case 'go':
                    logMessage(`${player.name} landed on GO. Collect ¬£${PASS_GO_SALARY}.`);
                    player.money += PASS_GO_SALARY; // Explicitly collect if landing on GO
                    updatePlayerInfoDisplay(player);
                    break; // Fall through to endTurnActions
                case 'jail':
                    logMessage(`${player.name} is just visiting Jail.`);
                    break; // Fall through to endTurnActions
                case 'free-parking':
                    logMessage(`${player.name} landed on Free Parking. Take a break!`);
                    break; // Fall through to endTurnActions
                default:
                    logMessage(`Landed on ${space.name} - no special action.`);
                    break; // Fall through to endTurnActions
            }
            subsequentAction(); // Call endTurnActions if not handled by specific cases
        }

        function applyCardEffect(player, card) {
            logMessage(`Applying card: ${card.text}`);
            let passedGoOnCardMove = false;

            switch (card.type) {
                case 'moveTo':
                    const oldPos = player.currentPosition;
                    player.currentPosition = card.value;
                    if (card.collectGo && player.currentPosition < oldPos) { // Passed GO
                        player.money += PASS_GO_SALARY;
                        logMessage(`${player.name} passed GO and collected ¬£${PASS_GO_SALARY}.`);
                        passedGoOnCardMove = true;
                    }
                    placeTokenOnBoard(player);
                    logMessage(`${player.name} moved to ${boardData[player.currentPosition].name}.`);
                    // Important: After moving, player might land on another action space (e.g. property, tax)
                    // This requires a "chained" action. For now, we'll simplify: if it's an ownable space, trigger that logic.
                    // Otherwise, the turn ends. This can be expanded for full recursive actions.
                    const newLandedSpace = boardData[player.currentPosition];
                    if (['property', 'station', 'utility'].includes(newLandedSpace.type)) {
                        handleOwnableSpace(player, newLandedSpace); // This will call endTurnActions
                        return; // Prevent double endTurnActions
                    } else if (newLandedSpace.type === 'tax') {
                        payTax(player, newLandedSpace);
                        return;
                    } // Other types like GO, Jail (visiting) don't need immediate re-triggering from a card move.
                    break;
                case 'moveToNearest': // station or utility
                    let nearestPosition = -1;
                    let currentMinDistance = TOTAL_SPACES;
                    const originalPos = player.currentPosition;

                    for (let i = 0; i < TOTAL_SPACES; i++) {
                        const checkPos = (originalPos + i) % TOTAL_SPACES; // Search forward
                        if (boardData[checkPos].type === card.value) { // card.value is 'station' or 'utility'
                            const distance = i;
                            if (distance < currentMinDistance) {
                                // This logic is a bit flawed for "nearest" if it means purely numerically closest.
                                // Monopoly usually means "next one on the board".
                                nearestPosition = checkPos;
                                break; // Found the next one
                            }
                        }
                    }
                    if (nearestPosition !== -1) {
                        const oldP = player.currentPosition;
                        player.currentPosition = nearestPosition;
                        if (player.currentPosition < oldP) { // Passed GO
                             player.money += PASS_GO_SALARY;
                             logMessage(`${player.name} passed GO and collected ¬£${PASS_GO_SALARY}.`);
                             passedGoOnCardMove = true;
                        }
                        placeTokenOnBoard(player);
                        logMessage(`${player.name} moved to nearest ${card.value}: ${boardData[player.currentPosition].name}.`);
                        const landedSpaceData = boardData[player.currentPosition];
                        
                        if (landedSpaceData.ownerId === null) { // Unowned
                            showModal(`Landed on ${landedSpaceData.name}`, `This ${card.value} is unowned. Buy for ¬£${landedSpaceData.price}?`, [
                                { text: "Buy", action: () => { tryBuyProperty(player, landedSpaceData); /* endTurnActions is called by tryBuyProperty */ } },
                                { text: "Pass", action: () => { logMessage(`${player.name} passed on buying.`); endTurnActions(); } }
                            ]);
                            return; // Modal handles next step
                        } else if (landedSpaceData.ownerId !== player.id) { // Owned by another
                            const owner = players[landedSpaceData.ownerId];
                            let rentToPay = 0;
                            if (card.subType === "payDoubleRentOrBuy" && landedSpaceData.type === "station") {
                                const stationsOwnedByOwner = owner.propertiesOwned.filter(id => boardData.find(s => s.id === id && s.type === 'station')).length;
                                rentToPay = (landedSpaceData.rent[stationsOwnedByOwner -1] || 25) * 2;
                                logMessage(`Paying double rent for station: ¬£${rentToPay}`);
                            } else if (card.subType === "payDiceRollRentOrBuy" && landedSpaceData.type === "utility") {
                                const utilityDiceRoll = Math.floor(Math.random() * 6) + 1 + Math.floor(Math.random() * 6) + 1; // Fresh roll for utility
                                logMessage(`${player.name} rolled ${utilityDiceRoll} for utility rent.`);
                                rentToPay = utilityDiceRoll * 10;
                                logMessage(`Paying 10x dice roll for utility: ¬£${rentToPay}`);
                            }
                            payRent(player, owner, rentToPay); // payRent calls endTurnActions
                            return; // Modal handles next step
                        } else { // Owns it
                             logMessage(`${player.name} landed on their own ${card.value}.`);
                        }
                    }
                    break;
                case 'collectMoney':
                    player.money += card.value;
                    logMessage(`${player.name} collected ¬£${card.value}.`);
                    break;
                case 'payMoney':
                    player.money -= card.value; // Bankruptcy not handled here yet
                    logMessage(`${player.name} paid ¬£${card.value}.`);
                    break;
                case 'getOutOfJailFree':
                    player.getOutOfJailFreeCards++;
                    logMessage(`${player.name} received a "Get Out of Jail Free" card.`);
                    break;
                case 'goToJail':
                    goToJail(player); // This function calls endTurnActions via its modal
                    return; // goToJail handles the turn end
                case 'moveSpaces':
                    const prevPos = player.currentPosition;
                    player.currentPosition = (player.currentPosition + card.value + TOTAL_SPACES) % TOTAL_SPACES; // Ensure positive result
                     // No GO collection for "Go Back 3 Spaces" usually
                    placeTokenOnBoard(player);
                    logMessage(`${player.name} moved ${card.value} spaces to ${boardData[player.currentPosition].name}.`);
                    // Handle landing on the new space after moving back
                    const spaceAfterMoveBack = boardData[player.currentPosition];
                     if (['property', 'station', 'utility'].includes(spaceAfterMoveBack.type)) {
                        handleOwnableSpace(player, spaceAfterMoveBack); 
                        return; 
                    } else if (spaceAfterMoveBack.type === 'tax') {
                        payTax(player, spaceAfterMoveBack);
                        return;
                    } else if (spaceAfterMoveBack.type === 'chance' || spaceAfterMoveBack.type === 'community-chest') {
                        // Avoid infinite card loop by just ending turn if moved to another card space by a card
                        logMessage(`Landed on another card space due to a card. Turn ends.`);
                    }
                    break;
                case 'streetRepairs':
                    // Simplified: flat fee per property owned for now, as houses aren't implemented
                    let totalRepairCost = 0;
                    player.propertiesOwned.forEach(propId => {
                        const propData = boardData.find(s => s.id === propId);
                        if (propData && propData.type === 'property') { // Only actual properties, not stations/utilities
                             // When houses are implemented, use card.houseCost and card.hotelCost
                             // For now, a flat fee per property as a placeholder for repair costs
                            totalRepairCost += 10; // Placeholder: ¬£10 per property
                        }
                    });
                    if (totalRepairCost > 0) {
                        player.money -= totalRepairCost;
                        logMessage(`${player.name} paid ¬£${totalRepairCost} for street repairs (simplified).`);
                    } else {
                        logMessage(`${player.name} has no properties, so no street repair costs.`);
                    }
                    break;
                case 'payEachPlayer':
                    players.forEach(p => {
                        if (p.id !== player.id) {
                            player.money -= card.value;
                            p.money += card.value;
                            logMessage(`${player.name} paid ¬£${card.value} to ${p.name}.`);
                        }
                    });
                    break;
                case 'collectFromPlayers':
                     players.forEach(p => {
                        if (p.id !== player.id) {
                            p.money -= card.value; // Other players pay
                            player.money += card.value; // Current player collects
                            logMessage(`${p.name} paid ¬£${card.value} to ${player.name}.`);
                            updatePlayerInfoDisplay(p); // Update other players' money display
                        }
                    });
                    break;
            }
            updateAllPlayerInfoDisplays(); // Update all displays after card effects
            if (!passedGoOnCardMove && card.type === 'moveTo' && player.currentPosition === GO_POSITION) {
                // If card moved player TO GO, but not PAST GO (e.g. "Advance to Go")
                // Standard GO landing collection might be desired if not already handled by card.collectGo
                // This is a bit tricky; usually "Advance to Go" implies collection.
                // For now, assume card.collectGo handles it.
            }
            endTurnActions(); // End turn after card effect applied
        }


        // --- Property, Tax, Jail Functions (largely same, but ensure they call endTurnActions or manage flow) ---
        function handleOwnableSpace(player, space) { /* ... same as before ... */ 
            if (space.ownerId === null) { 
                const buyCost = space.price;
                showModal(
                    `For Sale: ${space.name}`,
                    `This property is unowned. Would you like to buy it for ¬£${buyCost}? <br>Your money: ¬£${player.money}`,
                    [
                        { text: `Buy (¬£${buyCost})`, action: () => tryBuyProperty(player, space), class: player.money >= buyCost ? '' : 'bg-gray-400 cursor-not-allowed' },
                        { text: "Pass", action: () => { logMessage(`${player.name} decided not to buy ${space.name}.`); endTurnActions(); }, class: 'secondary' }
                    ]
                );
            } else if (space.ownerId !== player.id) { 
                const owner = players[space.ownerId];
                let rentAmount = 0;
                if (space.type === 'property') rentAmount = space.rent[space.houses || 0]; // Use houses count for rent
                else if (space.type === 'station') {
                    const stationsOwned = owner.propertiesOwned.filter(pId => boardData.find(s => s.id === pId && s.type === 'station')).length;
                    rentAmount = space.rent[stationsOwned - 1] || 25;
                } else if (space.type === 'utility') {
                    const utilitiesOwned = owner.propertiesOwned.filter(pId => boardData.find(s => s.id === pId && s.type === 'utility')).length;
                    const lastRoll = dice[0] + dice[1]; // Use current turn's dice roll
                    rentAmount = utilitiesOwned === 1 ? lastRoll * 4 : lastRoll * 10;
                }

                if (rentAmount > 0) {
                     showModal( "Rent Due!", `This property is owned by ${owner.name}. You owe ¬£${rentAmount} in rent.`,
                        [{ text: `Pay ¬£${rentAmount}`, action: () => payRent(player, owner, rentAmount) }]
                    );
                } else {
                     logMessage(`${space.name} is owned by ${owner.name}, but no rent due.`);
                     endTurnActions();
                }
            } else { 
                logMessage(`${player.name} landed on their own property: ${space.name}.`);
                endTurnActions();
            }
        }
        function tryBuyProperty(player, space) { /* ... same as before ... */ 
            const cost = space.price;
            if (player.money >= cost) {
                player.money -= cost;
                space.ownerId = player.id;
                player.propertiesOwned.push(space.id); 
                logMessage(`${player.name} bought ${space.name} for ¬£${cost}.`);
                updatePlayerInfoDisplay(player);
                updateOwnerMarker(boardData.indexOf(space));
            } else {
                logMessage(`${player.name} does not have enough money to buy ${space.name}.`);
            }
            endTurnActions();
        }
        function payRent(payer, owner, amount) { /* ... same as before ... */ 
             if (payer.money >= amount) {
                payer.money -= amount;
                owner.money += amount;
                logMessage(`${payer.name} paid ¬£${amount} rent to ${owner.name}.`);
            } else { 
                const amountPaid = payer.money;
                owner.money += amountPaid;
                payer.money = 0;
                logMessage(`${payer.name} could only pay ¬£${amountPaid} of ¬£${amount} rent to ${owner.name}. ${payer.name} is bankrupt! (Bankruptcy logic TBD)`);
            }
            updatePlayerInfoDisplay(payer);
            updatePlayerInfoDisplay(owner);
            endTurnActions();
        }
        function payTax(player, space) { /* ... same as before ... */ 
            const taxAmount = space.amount;
            player.money -= taxAmount;
            logMessage(`${player.name} paid ¬£${taxAmount} for ${space.name}.`);
            updatePlayerInfoDisplay(player);
            showModal( space.name, `You landed on ${space.name}. <br>Pay ¬£${taxAmount}.`,
                [{ text: "OK", action: endTurnActions }]
            );
        }
        function goToJail(player, fromCard = false) {
            player.currentPosition = JAIL_POSITION;
            player.inJail = true;
            player.jailTurns = 0;
            placeTokenOnBoard(player);
            updatePlayerInfoDisplay(player);
            logMessage(`${player.name} was sent to Jail!`);
            showModal("üöì Go To Jail! üöì", "Oh no! You've been caught and sent directly to Jail. Do not pass Go, do not collect ¬£200.",
                [{ text: "Bummer!", action: endTurnActions }] // endTurnActions will handle if it's still their turn (e.g. not doubles)
            );
        }
        function handleJailTurn(player) {
            player.jailTurns++;
            const options = [
                { text: `Pay ¬£50 Fine`, action: () => {
                    if (player.money >= 50) {
                        player.money -= 50;
                        player.inJail = false;
                        logMessage(`${player.name} paid ¬£50 to get out of jail.`);
                        updatePlayerInfoDisplay(player);
                        rollDiceButton.disabled = false; // Allow to roll immediately after paying
                    } else {
                        logMessage(`${player.name} doesn't have ¬£50 to pay the fine.`);
                        // Re-show modal or force other options if money is insufficient
                        handleJailTurn(player); // Simple re-prompt for now
                    }
                }}
            ];
            if (player.getOutOfJailFreeCards > 0) {
                options.push({ text: "Use Get Out of Jail Free Card", action: () => {
                    player.getOutOfJailFreeCards--;
                    player.inJail = false;
                    logMessage(`${player.name} used a Get Out of Jail Free card.`);
                    updatePlayerInfoDisplay(player);
                    rollDiceButton.disabled = false; // Allow to roll immediately
                }});
            }
            options.push({ text: "Try to Roll Doubles", action: () => {
                const d1 = Math.floor(Math.random() * 6) + 1;
                const d2 = Math.floor(Math.random() * 6) + 1;
                dice1Display.textContent = d1;
                dice2Display.textContent = d2;
                diceTotalDisplay.textContent = d1 + d2;
                logMessage(`${player.name} (in jail) rolled ${d1} and ${d2}.`);
                if (d1 === d2) {
                    player.inJail = false;
                    logMessage("Doubles! You're out of jail. Move according to roll.");
                    // Move player by d1+d2, then normal landing logic
                    player.currentPosition = (player.currentPosition + d1 + d2) % TOTAL_SPACES; // Should be from JAIL_POSITION
                    placeTokenOnBoard(player);
                    updatePlayerInfoDisplay(player);
                    logMessage(`${player.name} landed on ${boardData[player.currentPosition].name.split('<br>')[0]}.`);
                    handleLandingOnSpace(player); // This will call endTurnActions
                } else {
                    logMessage("No doubles. Still in jail.");
                    if (player.jailTurns >= 3) {
                        logMessage("Third attempt failed. Must pay ¬£50 fine or use card if available.");
                        // Force pay or use card if possible, otherwise stay in jail (or bankruptcy if no money/card)
                        // Simplified: For now, just end turn if 3 turns passed and no doubles
                        endTurnActions();
                    } else {
                       endTurnActions(); // End turn if not doubles and not 3rd turn
                    }
                }
            }});

            showModal(
                "In Jail!",
                `${player.name}, you are in Jail (Turn ${player.jailTurns} of 3). Choose an option:`,
                options
            );
        }


        // --- Turn Progression ---
        function endTurnActions() {
            const currentPlayer = players[currentPlayerIndex];
            if (dice[0] === dice[1] && !currentPlayer.inJail && rollDiceButton.disabled) { // Check if button is disabled to prevent re-triggering on first roll of doubles
                 logMessage(`${currentPlayer.name} rolled doubles! Roll again.`);
                 rollDiceButton.disabled = false; 
            } else {
                // If player was in jail and got out by paying/card, their turn might continue with a roll
                // If they got out by rolling doubles, their move is done, so switch turn
                if (currentPlayer.inJail) { // Still in jail after trying to get out
                     setTimeout(() => { switchTurn(); rollDiceButton.disabled = false; }, 300);
                } else if (!rollDiceButton.disabled) { // If button is enabled, it means they can roll (e.g. got out of jail by paying)
                    // Don't switch turn yet, let them roll.
                }
                 else { // Normal turn end or got out of jail by rolling doubles.
                    setTimeout(() => { switchTurn(); rollDiceButton.disabled = false; }, 300);
                }
            }
        }

        function switchTurn() { /* ... same as before ... */ 
            currentPlayerIndex = (currentPlayerIndex + 1) % players.length;
            updateCurrentPlayerDisplay();
            logMessage(`${players[currentPlayerIndex].name}'s (${players[currentPlayerIndex].tokenRepresentation}) turn.`);
            updateAllPlayerInfoDisplays();
        }
        function updateCurrentPlayerDisplay() { /* ... same as before ... */ 
            if (players.length > 0) {
                currentPlayerNameDisplay.textContent = `${players[currentPlayerIndex].name} (${players[currentPlayerIndex].tokenRepresentation})`;
            }
        }
        function logMessage(message) { /* ... same as before ... */ 
            const previousMessage = messageLog.innerHTML;
            messageLog.innerHTML = message + (previousMessage ? '<br>' + previousMessage.split('<br>').slice(0, 9).join('<br>') : '');
        }

        // --- Event Listeners & Initialization ---
        rollDiceButton.addEventListener('click', handlePlayerTurn);
        window.onload = () => {
            document.querySelectorAll('.board .space').forEach(spaceEl => {
                if (!spaceEl.querySelector('.content')) { const contentWrapper = document.createElement('div'); contentWrapper.classList.add('content'); while (spaceEl.firstChild) { contentWrapper.appendChild(spaceEl.firstChild); } spaceEl.appendChild(contentWrapper); }
                if (!spaceEl.querySelector('.token-container')) { const tokenContainer = document.createElement('div'); tokenContainer.classList.add('token-container'); spaceEl.appendChild(tokenContainer); }
                if (!spaceEl.querySelector('.owner-marker-container')) { const ownerMarkerContainer = document.createElement('div'); ownerMarkerContainer.classList.add('owner-marker-container'); const ownerMarker = document.createElement('div'); ownerMarker.classList.add('owner-marker'); ownerMarkerContainer.appendChild(ownerMarker); spaceEl.appendChild(ownerMarkerContainer); }
            });
            initializeGame(2);
        };
    </script>
</body>
</html>
